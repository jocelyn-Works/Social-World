security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email  # identification par l'email
    firewalls: # pare-feu
        dev: 
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            remember_me:  # Configuration de  "Se souvenir de moi".
                secret: '%kernel.secret%'
            form_login: # Configuration de la connexion via le formulaire.
                login_path: login # page de connexion
                check_path: login # verification de l'authentification
                enable_csrf: true # jeton csrf 
                default_target_path: post  # apr√®s connexion redirection vers la route post
                always_use_default_target_path: true
            logout: # deconnexion
                path: logout # chemin de dconnexion
            login_throttling: # limitte les tentative de connexion
                max_attempts: 3 # 4 tentative de connexion 
                interval: "5 minutes" #  5 minutes d'interval avant de pouvoir ressayer

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
